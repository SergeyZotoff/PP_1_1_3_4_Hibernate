Index: src/main/java/jm/task/core/jdbc/util/Util.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.util;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Util {\n    private static final String DB_Driver = \"com.mysql.cj.jdbc.Driver\";\n    private static final String username = \"root\";\n    private static final String password = \"root2503\";\n    private static final String url = \"jdbc:mysql://localhost:3306/test\";\n\n    public static Connection getConnection() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        Connection connection = null;\n        try {\n            Class.forName(DB_Driver).getDeclaredConstructor().newInstance();\n            connection = DriverManager.getConnection(url, username, password);\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n        return connection;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/util/Util.java b/src/main/java/jm/task/core/jdbc/util/Util.java
--- a/src/main/java/jm/task/core/jdbc/util/Util.java	
+++ b/src/main/java/jm/task/core/jdbc/util/Util.java	
@@ -10,15 +10,18 @@
     private static final String username = "root";
     private static final String password = "root2503";
     private static final String url = "jdbc:mysql://localhost:3306/test";
+    private static Connection connection;
 
-    public static Connection getConnection() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
-        Connection connection = null;
+    static {
         try {
-            Class.forName(DB_Driver).getDeclaredConstructor().newInstance();
-            connection = DriverManager.getConnection(url, username, password);
+            Class.forName(DB_Driver);
+            connection = (Connection) DriverManager.getConnection(url, username, password);
         } catch (ClassNotFoundException | SQLException e) {
             e.printStackTrace();
         }
+    }
+
+    public static Connection getConnection() {
         return connection;
     }
-}
+}
\ No newline at end of file
Index: src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.dao;\n\nimport jdk.swing.interop.SwingInterOpUtils;\nimport jm.task.core.jdbc.model.User;\nimport jm.task.core.jdbc.util.Util;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static java.sql.DriverManager.getConnection;\n\npublic class UserDaoJDBCImpl extends Util implements UserDao {\n    private final Connection connection = getConnection();\n\n    public UserDaoJDBCImpl() throws InvocationTargetException,\n            NoSuchMethodException, InstantiationException, IllegalAccessException {\n    }\n\n    public void createUsersTable() throws SQLException {\n        String sql = \"CREATE TABLE IF NOT EXISTS Users \" +\n                \"(id INT NOT NULL AUTO_INCREMENT, \" +\n                \"name VARCHAR(255), lastName VARCHAR(255) NOT NULL , \" +\n                \"age int NOT NULL, PRIMARY KEY (ID))\";\n        Statement statement = null;\n        statement = connection.createStatement();\n        try {\n            statement.executeUpdate(sql);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void dropUsersTable() throws SQLException {\n        String sql = \"DROP TABLE IF EXISTS Users CASCADE\";\n        Statement statement = null;\n        try {\n            statement = connection.createStatement();\n            statement.executeUpdate(sql);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n    public void saveUser(String name, String lastName, byte age) throws SQLException {\n        PreparedStatement preparedStatement = null;\n        String sql = \"INSERT INTO Users(name, lastName, age) VALUES(?, ?, ?)\";\n\n        try {\n            preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setString(1, name);\n            preparedStatement.setString(2, lastName);\n            preparedStatement.setByte(3, age);\n            preparedStatement.executeUpdate();\n            System.out.println(\"User с именем \" + name + \" добавлен в базу данных\");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void removeUserById(long id) {\n        String sql = \"DELETE FROM Users WHERE id = (?)\";\n        try {\n            PreparedStatement preparedStatement = connection.prepareStatement(sql);\n            preparedStatement.setLong(1, id);\n            preparedStatement.executeUpdate();\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<User> getAllUsers() throws SQLException {\n        List<User> userList = new ArrayList<>();\n        String sql = \"SELECT * FROM Users\";\n        Statement statement = null;\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(sql);\n\n            while (resultSet.next()) {\n                User user = new User();\n                user.setId(resultSet.getLong(\"id\"));\n                user.setName(resultSet.getString(\"name\"));\n                user.setLastName(resultSet.getString(\"lastName\"));\n                user.setAge(resultSet.getByte(\"age\"));\n                userList.add(user);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        System.out.println(userList);\n        return userList;\n    }\n\n    public void cleanUsersTable() {\n        try {\n            Statement statement = connection.createStatement();\n            String sql = \"DELETE FROM Users\";\n            statement.executeUpdate(sql);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java b/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java
--- a/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
+++ b/src/main/java/jm/task/core/jdbc/dao/UserDaoJDBCImpl.java	
@@ -1,6 +1,5 @@
 package jm.task.core.jdbc.dao;
 
-import jdk.swing.interop.SwingInterOpUtils;
 import jm.task.core.jdbc.model.User;
 import jm.task.core.jdbc.util.Util;
 
@@ -9,45 +8,36 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static java.sql.DriverManager.getConnection;
-
-public class UserDaoJDBCImpl extends Util implements UserDao {
-    private final Connection connection = getConnection();
+public class UserDaoJDBCImpl implements UserDao {
+    private final Connection connection = Util.getConnection();
 
     public UserDaoJDBCImpl() throws InvocationTargetException,
-            NoSuchMethodException, InstantiationException, IllegalAccessException {
+            NoSuchMethodException, InstantiationException, IllegalAccessException, SQLException, ClassNotFoundException {
     }
 
     public void createUsersTable() throws SQLException {
-        String sql = "CREATE TABLE IF NOT EXISTS Users " +
-                "(id INT NOT NULL AUTO_INCREMENT, " +
-                "name VARCHAR(255), lastName VARCHAR(255) NOT NULL , " +
-                "age int NOT NULL, PRIMARY KEY (ID))";
-        Statement statement = null;
-        statement = connection.createStatement();
-        try {
-            statement.executeUpdate(sql);
+        try (Statement statement = connection.createStatement()) {
+            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Users " +
+                    "(id INT NOT NULL AUTO_INCREMENT, " +
+                    "name VARCHAR(255), lastName VARCHAR(255) NOT NULL , " +
+                    "age int NOT NULL, PRIMARY KEY (ID))");
+
         } catch (SQLException e) {
             e.printStackTrace();
         }
     }
 
     public void dropUsersTable() throws SQLException {
-        String sql = "DROP TABLE IF EXISTS Users CASCADE";
-        Statement statement = null;
-        try {
-            statement = connection.createStatement();
-            statement.executeUpdate(sql);
+        try (Statement statement = connection.createStatement()) {
+            statement.executeUpdate("DROP TABLE IF EXISTS Users CASCADE");
+
         } catch (SQLException e) {
             e.printStackTrace();
         }
     }
     public void saveUser(String name, String lastName, byte age) throws SQLException {
-        PreparedStatement preparedStatement = null;
-        String sql = "INSERT INTO Users(name, lastName, age) VALUES(?, ?, ?)";
-
-        try {
-            preparedStatement = connection.prepareStatement(sql);
+        try (PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO Users(name, lastName, age) " +
+                "VALUES(?, ?, ?)")) {
             preparedStatement.setString(1, name);
             preparedStatement.setString(2, lastName);
             preparedStatement.setByte(3, age);
@@ -60,9 +50,7 @@
     }
 
     public void removeUserById(long id) {
-        String sql = "DELETE FROM Users WHERE id = (?)";
-        try {
-            PreparedStatement preparedStatement = connection.prepareStatement(sql);
+        try (PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM Users WHERE id = (?)")) {
             preparedStatement.setLong(1, id);
             preparedStatement.executeUpdate();
 
@@ -73,11 +61,8 @@
 
     public List<User> getAllUsers() throws SQLException {
         List<User> userList = new ArrayList<>();
-        String sql = "SELECT * FROM Users";
-        Statement statement = null;
-        try {
-            statement = connection.createStatement();
-            ResultSet resultSet = statement.executeQuery(sql);
+        try (Statement statement = connection.createStatement()) {
+            ResultSet resultSet = statement.executeQuery("SELECT * FROM Users");
 
             while (resultSet.next()) {
                 User user = new User();
@@ -87,6 +72,7 @@
                 user.setAge(resultSet.getByte("age"));
                 userList.add(user);
             }
+
         } catch (SQLException e) {
             e.printStackTrace();
         }
@@ -95,10 +81,8 @@
     }
 
     public void cleanUsersTable() {
-        try {
-            Statement statement = connection.createStatement();
-            String sql = "DELETE FROM Users";
-            statement.executeUpdate(sql);
+        try (Statement statement = connection.createStatement()) {
+            statement.executeUpdate("DELETE FROM Users");
 
         } catch (SQLException e) {
             e.printStackTrace();
Index: src/test/java/UserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import jm.task.core.jdbc.model.User;\nimport jm.task.core.jdbc.service.UserService;\nimport jm.task.core.jdbc.service.UserServiceImpl;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.List;\n\npublic class UserServiceTest {\n    private final UserService userService = new UserServiceImpl();\n\n    private final String testName = \"Ivan\";\n    private final String testLastName = \"Ivanov\";\n    private final byte testAge = 5;\n\n    public UserServiceTest() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n    }\n\n\n    @Test\n    public void dropUsersTable() {\n        try {\n            userService.dropUsersTable();\n            userService.dropUsersTable();\n        } catch (Exception e) {\n            Assert.fail(\"При тестировании удаления таблицы произошло исключение\\n\" + e);\n        }\n    }\n\n    @Test\n    public void createUsersTable() {\n        try {\n            userService.dropUsersTable();\n            userService.createUsersTable();\n        } catch (Exception e) {\n            Assert.fail(\"При тестировании создания таблицы пользователей произошло исключение\\n\" + e.getMessage());\n        }\n    }\n\n    @Test\n    public void saveUser() {\n        try {\n            userService.dropUsersTable();\n            userService.createUsersTable();\n            userService.saveUser(testName, testLastName, testAge);\n\n            User user = userService.getAllUsers().get(0);\n\n            if (!testName.equals(user.getName())\n                    || !testLastName.equals(user.getLastName())\n                    || testAge != user.getAge())\n             {\n                Assert.fail(\"User был некорректно добавлен в базу данных\");\n            }\n\n        } catch (Exception e) {\n            Assert.fail(\"Во время тестирования сохранения пользователя произошло исключение\\n\" + e);\n        }\n    }\n\n    @Test\n    public void removeUserById() {\n        try {\n            userService.dropUsersTable();\n            userService.createUsersTable();\n            userService.saveUser(testName, testLastName, testAge);\n            userService.removeUserById(1L);\n        } catch (Exception e) {\n            Assert.fail(\"При тестировании удаления пользователя по id произошло исключение\\n\" + e);\n        }\n    }\n\n    @Test\n    public void getAllUsers() {\n        try {\n            userService.dropUsersTable();\n            userService.createUsersTable();\n            userService.saveUser(testName, testLastName, testAge);\n            List<User> userList = userService.getAllUsers();\n\n            if (userList.size() != 1) {\n                Assert.fail(\"Проверьте корректность работы метода сохранения пользователя/удаления или создания таблицы\");\n            }\n        } catch (Exception e) {\n            Assert.fail(\"При попытке достать всех пользователей из базы данных произошло исключение\\n\" + e);\n        }\n    }\n\n    @Test\n    public void cleanUsersTable() {\n        try {\n            userService.dropUsersTable();\n            userService.createUsersTable();\n            userService.saveUser(testName, testLastName, testAge);\n            userService.cleanUsersTable();\n\n            if (userService.getAllUsers().size() != 0) {\n                Assert.fail(\"Метод очищения таблицы пользователей реализован не корректно\");\n            }\n        } catch (Exception e) {\n            Assert.fail(\"При тестировании очистки таблицы пользователей произошло исключение\\n\" + e);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/UserServiceTest.java b/src/test/java/UserServiceTest.java
--- a/src/test/java/UserServiceTest.java	
+++ b/src/test/java/UserServiceTest.java	
@@ -5,6 +5,7 @@
 import org.junit.Test;
 
 import java.lang.reflect.InvocationTargetException;
+import java.sql.SQLException;
 import java.util.List;
 
 public class UserServiceTest {
@@ -14,7 +15,7 @@
     private final String testLastName = "Ivanov";
     private final byte testAge = 5;
 
-    public UserServiceTest() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
+    public UserServiceTest() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, SQLException, ClassNotFoundException {
     }
 
 
Index: src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc.service;\n\nimport jm.task.core.jdbc.dao.UserDaoJDBCImpl;\nimport jm.task.core.jdbc.model.User;\nimport jm.task.core.jdbc.util.Util;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.*;\nimport java.util.List;\n\n\npublic class UserServiceImpl extends Util implements UserService {\n\n    UserDaoJDBCImpl userDaoJDBC = new UserDaoJDBCImpl();\n\n    public UserServiceImpl() throws InvocationTargetException, NoSuchMethodException,\n            InstantiationException, IllegalAccessException {\n    }\n\n    public void createUsersTable() throws SQLException {\n        userDaoJDBC.createUsersTable();\n    }\n\n    public void dropUsersTable() throws SQLException {\n        userDaoJDBC.dropUsersTable();\n    }\n\n    public void saveUser(String name, String lastName, byte age) throws SQLException {\n        userDaoJDBC.saveUser(name, lastName, age);\n    }\n\n    public void removeUserById(long id) {\n        userDaoJDBC.removeUserById(id);\n    }\n\n    @Override\n    public List<User> getAllUsers() throws SQLException {\n        return userDaoJDBC.getAllUsers();\n    }\n\n    public void cleanUsersTable() {\n        userDaoJDBC.cleanUsersTable();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java b/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java
--- a/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java	
+++ b/src/main/java/jm/task/core/jdbc/service/UserServiceImpl.java	
@@ -1,5 +1,6 @@
 package jm.task.core.jdbc.service;
 
+import jm.task.core.jdbc.dao.UserDao;
 import jm.task.core.jdbc.dao.UserDaoJDBCImpl;
 import jm.task.core.jdbc.model.User;
 import jm.task.core.jdbc.util.Util;
@@ -9,12 +10,12 @@
 import java.util.List;
 
 
-public class UserServiceImpl extends Util implements UserService {
+public class UserServiceImpl extends Util implements UserService, UserDao {
 
     UserDaoJDBCImpl userDaoJDBC = new UserDaoJDBCImpl();
 
     public UserServiceImpl() throws InvocationTargetException, NoSuchMethodException,
-            InstantiationException, IllegalAccessException {
+            InstantiationException, IllegalAccessException, SQLException, ClassNotFoundException {
     }
 
     public void createUsersTable() throws SQLException {
Index: src/main/java/jm/task/core/jdbc/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package jm.task.core.jdbc;\n\nimport jm.task.core.jdbc.dao.UserDaoJDBCImpl;\nimport jm.task.core.jdbc.model.User;\nimport jm.task.core.jdbc.service.UserServiceImpl;\nimport jm.task.core.jdbc.util.Util;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nimport static java.lang.Class.forName;\nimport static java.sql.DriverManager.getConnection;\n\npublic class Main {\n    public static void main(String[] args) throws SQLException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n        UserServiceImpl userDao = new UserServiceImpl();\n        userDao.createUsersTable();\n        userDao.saveUser(\"Name1\", \"LastName1\", (byte) 20);\n        userDao.saveUser(\"Name2\", \"LastName2\", (byte) 25);\n        userDao.saveUser(\"Name3\", \"LastName3\", (byte) 31);\n        userDao.saveUser(\"Name4\", \"LastName4\", (byte) 38);\n        userDao.getAllUsers();\n        userDao.cleanUsersTable();\n        userDao.dropUsersTable();\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/jm/task/core/jdbc/Main.java b/src/main/java/jm/task/core/jdbc/Main.java
--- a/src/main/java/jm/task/core/jdbc/Main.java	
+++ b/src/main/java/jm/task/core/jdbc/Main.java	
@@ -14,7 +14,7 @@
 import static java.sql.DriverManager.getConnection;
 
 public class Main {
-    public static void main(String[] args) throws SQLException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
+    public static void main(String[] args) throws SQLException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, ClassNotFoundException {
         UserServiceImpl userDao = new UserServiceImpl();
         userDao.createUsersTable();
         userDao.saveUser("Name1", "LastName1", (byte) 20);
Index: .idea/jarRepositories.xml
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/jarRepositories.xml	
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/dbnavigator.xml
===================================================================
diff --git a/.idea/dbnavigator.xml b/.idea/dbnavigator.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/dbnavigator.xml	
@@ -0,0 +1,467 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DBNavigator.Project.DataEditorManager">
+    <record-view-column-sorting-type value="BY_INDEX" />
+    <value-preview-text-wrapping value="true" />
+    <value-preview-pinned value="false" />
+  </component>
+  <component name="DBNavigator.Project.DataExportManager">
+    <export-instructions>
+      <create-header value="true" />
+      <friendly-headers value="false" />
+      <quote-values-containing-separator value="true" />
+      <quote-all-values value="false" />
+      <value-separator value="" />
+      <file-name value="" />
+      <file-location value="" />
+      <scope value="GLOBAL" />
+      <destination value="FILE" />
+      <format value="EXCEL" />
+      <charset value="UTF-8" />
+    </export-instructions>
+  </component>
+  <component name="DBNavigator.Project.DatabaseBrowserManager">
+    <autoscroll-to-editor value="false" />
+    <autoscroll-from-editor value="true" />
+    <show-object-properties value="true" />
+    <loaded-nodes />
+  </component>
+  <component name="DBNavigator.Project.DatabaseFileManager">
+    <open-files />
+  </component>
+  <component name="DBNavigator.Project.EditorStateManager">
+    <last-used-providers />
+  </component>
+  <component name="DBNavigator.Project.ExecutionManager">
+    <retain-sticky-names value="false" />
+  </component>
+  <component name="DBNavigator.Project.MethodExecutionManager">
+    <method-browser />
+    <execution-history>
+      <group-entries value="true" />
+      <execution-inputs />
+    </execution-history>
+    <argument-values-cache />
+  </component>
+  <component name="DBNavigator.Project.ObjectDependencyManager">
+    <last-used-dependency-type value="INCOMING" />
+  </component>
+  <component name="DBNavigator.Project.ObjectQuickFilterManager">
+    <last-used-operator value="EQUAL" />
+    <filters />
+  </component>
+  <component name="DBNavigator.Project.ParserDiagnosticsManager">
+    <diagnostics-history />
+  </component>
+  <component name="DBNavigator.Project.ScriptExecutionManager" clear-outputs="true">
+    <recently-used-interfaces />
+  </component>
+  <component name="DBNavigator.Project.Settings">
+    <connections />
+    <browser-settings>
+      <general>
+        <display-mode value="TABBED" />
+        <navigation-history-size value="100" />
+        <show-object-details value="false" />
+      </general>
+      <filters>
+        <object-type-filter>
+          <object-type name="SCHEMA" enabled="true" />
+          <object-type name="USER" enabled="true" />
+          <object-type name="ROLE" enabled="true" />
+          <object-type name="PRIVILEGE" enabled="true" />
+          <object-type name="CHARSET" enabled="true" />
+          <object-type name="TABLE" enabled="true" />
+          <object-type name="VIEW" enabled="true" />
+          <object-type name="MATERIALIZED_VIEW" enabled="true" />
+          <object-type name="NESTED_TABLE" enabled="true" />
+          <object-type name="COLUMN" enabled="true" />
+          <object-type name="INDEX" enabled="true" />
+          <object-type name="CONSTRAINT" enabled="true" />
+          <object-type name="DATASET_TRIGGER" enabled="true" />
+          <object-type name="DATABASE_TRIGGER" enabled="true" />
+          <object-type name="SYNONYM" enabled="true" />
+          <object-type name="SEQUENCE" enabled="true" />
+          <object-type name="PROCEDURE" enabled="true" />
+          <object-type name="FUNCTION" enabled="true" />
+          <object-type name="PACKAGE" enabled="true" />
+          <object-type name="TYPE" enabled="true" />
+          <object-type name="TYPE_ATTRIBUTE" enabled="true" />
+          <object-type name="ARGUMENT" enabled="true" />
+          <object-type name="DIMENSION" enabled="true" />
+          <object-type name="CLUSTER" enabled="true" />
+          <object-type name="DBLINK" enabled="true" />
+        </object-type-filter>
+      </filters>
+      <sorting>
+        <object-type name="COLUMN" sorting-type="NAME" />
+        <object-type name="FUNCTION" sorting-type="NAME" />
+        <object-type name="PROCEDURE" sorting-type="NAME" />
+        <object-type name="ARGUMENT" sorting-type="POSITION" />
+      </sorting>
+      <default-editors>
+        <object-type name="VIEW" editor-type="SELECTION" />
+        <object-type name="PACKAGE" editor-type="SELECTION" />
+        <object-type name="TYPE" editor-type="SELECTION" />
+      </default-editors>
+    </browser-settings>
+    <navigation-settings>
+      <lookup-filters>
+        <lookup-objects>
+          <object-type name="SCHEMA" enabled="true" />
+          <object-type name="USER" enabled="false" />
+          <object-type name="ROLE" enabled="false" />
+          <object-type name="PRIVILEGE" enabled="false" />
+          <object-type name="CHARSET" enabled="false" />
+          <object-type name="TABLE" enabled="true" />
+          <object-type name="VIEW" enabled="true" />
+          <object-type name="MATERIALIZED VIEW" enabled="true" />
+          <object-type name="INDEX" enabled="true" />
+          <object-type name="CONSTRAINT" enabled="true" />
+          <object-type name="DATASET TRIGGER" enabled="true" />
+          <object-type name="DATABASE TRIGGER" enabled="true" />
+          <object-type name="SYNONYM" enabled="false" />
+          <object-type name="SEQUENCE" enabled="true" />
+          <object-type name="PROCEDURE" enabled="true" />
+          <object-type name="FUNCTION" enabled="true" />
+          <object-type name="PACKAGE" enabled="true" />
+          <object-type name="TYPE" enabled="true" />
+          <object-type name="DIMENSION" enabled="false" />
+          <object-type name="CLUSTER" enabled="false" />
+          <object-type name="DBLINK" enabled="true" />
+        </lookup-objects>
+        <force-database-load value="false" />
+        <prompt-connection-selection value="true" />
+        <prompt-schema-selection value="true" />
+      </lookup-filters>
+    </navigation-settings>
+    <dataset-grid-settings>
+      <general>
+        <enable-zooming value="true" />
+        <enable-column-tooltip value="true" />
+      </general>
+      <sorting>
+        <nulls-first value="true" />
+        <max-sorting-columns value="4" />
+      </sorting>
+      <tracking-columns>
+        <columnNames value="" />
+        <visible value="true" />
+        <editable value="false" />
+      </tracking-columns>
+    </dataset-grid-settings>
+    <dataset-editor-settings>
+      <text-editor-popup>
+        <active value="false" />
+        <active-if-empty value="false" />
+        <data-length-threshold value="100" />
+        <popup-delay value="1000" />
+      </text-editor-popup>
+      <values-actions-popup>
+        <show-popup-button value="true" />
+        <element-count-threshold value="1000" />
+        <data-length-threshold value="250" />
+      </values-actions-popup>
+      <general>
+        <fetch-block-size value="100" />
+        <fetch-timeout value="30" />
+        <trim-whitespaces value="true" />
+        <convert-empty-strings-to-null value="true" />
+        <select-content-on-cell-edit value="true" />
+        <large-value-preview-active value="true" />
+      </general>
+      <filters>
+        <prompt-filter-dialog value="true" />
+        <default-filter-type value="BASIC" />
+      </filters>
+      <qualified-text-editor text-length-threshold="300">
+        <content-types>
+          <content-type name="Text" enabled="true" />
+          <content-type name="Properties" enabled="true" />
+          <content-type name="XML" enabled="true" />
+          <content-type name="DTD" enabled="true" />
+          <content-type name="HTML" enabled="true" />
+          <content-type name="XHTML" enabled="true" />
+          <content-type name="CSS" enabled="true" />
+          <content-type name="Java" enabled="true" />
+          <content-type name="SQL" enabled="true" />
+          <content-type name="PL/SQL" enabled="true" />
+          <content-type name="JavaScript" enabled="true" />
+          <content-type name="JSON" enabled="true" />
+          <content-type name="JSON5" enabled="true" />
+          <content-type name="JSP" enabled="true" />
+          <content-type name="JSPx" enabled="true" />
+          <content-type name="Groovy" enabled="true" />
+          <content-type name="FTL" enabled="true" />
+          <content-type name="VTL" enabled="true" />
+          <content-type name="AIDL" enabled="true" />
+          <content-type name="YAML" enabled="true" />
+          <content-type name="Manifest" enabled="true" />
+        </content-types>
+      </qualified-text-editor>
+      <record-navigation>
+        <navigation-target value="VIEWER" />
+      </record-navigation>
+    </dataset-editor-settings>
+    <code-editor-settings>
+      <general>
+        <show-object-navigation-gutter value="false" />
+        <show-spec-declaration-navigation-gutter value="true" />
+        <enable-spellchecking value="true" />
+        <enable-reference-spellchecking value="false" />
+      </general>
+      <confirmations>
+        <save-changes value="false" />
+        <revert-changes value="true" />
+      </confirmations>
+    </code-editor-settings>
+    <code-completion-settings>
+      <filters>
+        <basic-filter>
+          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
+          <filter-element type="RESERVED_WORD" id="function" selected="true" />
+          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
+          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
+          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
+          <filter-element type="OBJECT" id="schema" selected="true" />
+          <filter-element type="OBJECT" id="role" selected="true" />
+          <filter-element type="OBJECT" id="user" selected="true" />
+          <filter-element type="OBJECT" id="privilege" selected="true" />
+          <user-schema>
+            <filter-element type="OBJECT" id="table" selected="true" />
+            <filter-element type="OBJECT" id="view" selected="true" />
+            <filter-element type="OBJECT" id="materialized view" selected="true" />
+            <filter-element type="OBJECT" id="index" selected="true" />
+            <filter-element type="OBJECT" id="constraint" selected="true" />
+            <filter-element type="OBJECT" id="trigger" selected="true" />
+            <filter-element type="OBJECT" id="synonym" selected="false" />
+            <filter-element type="OBJECT" id="sequence" selected="true" />
+            <filter-element type="OBJECT" id="procedure" selected="true" />
+            <filter-element type="OBJECT" id="function" selected="true" />
+            <filter-element type="OBJECT" id="package" selected="true" />
+            <filter-element type="OBJECT" id="type" selected="true" />
+            <filter-element type="OBJECT" id="dimension" selected="true" />
+            <filter-element type="OBJECT" id="cluster" selected="true" />
+            <filter-element type="OBJECT" id="dblink" selected="true" />
+          </user-schema>
+          <public-schema>
+            <filter-element type="OBJECT" id="table" selected="false" />
+            <filter-element type="OBJECT" id="view" selected="false" />
+            <filter-element type="OBJECT" id="materialized view" selected="false" />
+            <filter-element type="OBJECT" id="index" selected="false" />
+            <filter-element type="OBJECT" id="constraint" selected="false" />
+            <filter-element type="OBJECT" id="trigger" selected="false" />
+            <filter-element type="OBJECT" id="synonym" selected="false" />
+            <filter-element type="OBJECT" id="sequence" selected="false" />
+            <filter-element type="OBJECT" id="procedure" selected="false" />
+            <filter-element type="OBJECT" id="function" selected="false" />
+            <filter-element type="OBJECT" id="package" selected="false" />
+            <filter-element type="OBJECT" id="type" selected="false" />
+            <filter-element type="OBJECT" id="dimension" selected="false" />
+            <filter-element type="OBJECT" id="cluster" selected="false" />
+            <filter-element type="OBJECT" id="dblink" selected="false" />
+          </public-schema>
+          <any-schema>
+            <filter-element type="OBJECT" id="table" selected="true" />
+            <filter-element type="OBJECT" id="view" selected="true" />
+            <filter-element type="OBJECT" id="materialized view" selected="true" />
+            <filter-element type="OBJECT" id="index" selected="true" />
+            <filter-element type="OBJECT" id="constraint" selected="true" />
+            <filter-element type="OBJECT" id="trigger" selected="true" />
+            <filter-element type="OBJECT" id="synonym" selected="true" />
+            <filter-element type="OBJECT" id="sequence" selected="true" />
+            <filter-element type="OBJECT" id="procedure" selected="true" />
+            <filter-element type="OBJECT" id="function" selected="true" />
+            <filter-element type="OBJECT" id="package" selected="true" />
+            <filter-element type="OBJECT" id="type" selected="true" />
+            <filter-element type="OBJECT" id="dimension" selected="true" />
+            <filter-element type="OBJECT" id="cluster" selected="true" />
+            <filter-element type="OBJECT" id="dblink" selected="true" />
+          </any-schema>
+        </basic-filter>
+        <extended-filter>
+          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
+          <filter-element type="RESERVED_WORD" id="function" selected="true" />
+          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
+          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
+          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
+          <filter-element type="OBJECT" id="schema" selected="true" />
+          <filter-element type="OBJECT" id="user" selected="true" />
+          <filter-element type="OBJECT" id="role" selected="true" />
+          <filter-element type="OBJECT" id="privilege" selected="true" />
+          <user-schema>
+            <filter-element type="OBJECT" id="table" selected="true" />
+            <filter-element type="OBJECT" id="view" selected="true" />
+            <filter-element type="OBJECT" id="materialized view" selected="true" />
+            <filter-element type="OBJECT" id="index" selected="true" />
+            <filter-element type="OBJECT" id="constraint" selected="true" />
+            <filter-element type="OBJECT" id="trigger" selected="true" />
+            <filter-element type="OBJECT" id="synonym" selected="true" />
+            <filter-element type="OBJECT" id="sequence" selected="true" />
+            <filter-element type="OBJECT" id="procedure" selected="true" />
+            <filter-element type="OBJECT" id="function" selected="true" />
+            <filter-element type="OBJECT" id="package" selected="true" />
+            <filter-element type="OBJECT" id="type" selected="true" />
+            <filter-element type="OBJECT" id="dimension" selected="true" />
+            <filter-element type="OBJECT" id="cluster" selected="true" />
+            <filter-element type="OBJECT" id="dblink" selected="true" />
+          </user-schema>
+          <public-schema>
+            <filter-element type="OBJECT" id="table" selected="true" />
+            <filter-element type="OBJECT" id="view" selected="true" />
+            <filter-element type="OBJECT" id="materialized view" selected="true" />
+            <filter-element type="OBJECT" id="index" selected="true" />
+            <filter-element type="OBJECT" id="constraint" selected="true" />
+            <filter-element type="OBJECT" id="trigger" selected="true" />
+            <filter-element type="OBJECT" id="synonym" selected="true" />
+            <filter-element type="OBJECT" id="sequence" selected="true" />
+            <filter-element type="OBJECT" id="procedure" selected="true" />
+            <filter-element type="OBJECT" id="function" selected="true" />
+            <filter-element type="OBJECT" id="package" selected="true" />
+            <filter-element type="OBJECT" id="type" selected="true" />
+            <filter-element type="OBJECT" id="dimension" selected="true" />
+            <filter-element type="OBJECT" id="cluster" selected="true" />
+            <filter-element type="OBJECT" id="dblink" selected="true" />
+          </public-schema>
+          <any-schema>
+            <filter-element type="OBJECT" id="table" selected="true" />
+            <filter-element type="OBJECT" id="view" selected="true" />
+            <filter-element type="OBJECT" id="materialized view" selected="true" />
+            <filter-element type="OBJECT" id="index" selected="true" />
+            <filter-element type="OBJECT" id="constraint" selected="true" />
+            <filter-element type="OBJECT" id="trigger" selected="true" />
+            <filter-element type="OBJECT" id="synonym" selected="true" />
+            <filter-element type="OBJECT" id="sequence" selected="true" />
+            <filter-element type="OBJECT" id="procedure" selected="true" />
+            <filter-element type="OBJECT" id="function" selected="true" />
+            <filter-element type="OBJECT" id="package" selected="true" />
+            <filter-element type="OBJECT" id="type" selected="true" />
+            <filter-element type="OBJECT" id="dimension" selected="true" />
+            <filter-element type="OBJECT" id="cluster" selected="true" />
+            <filter-element type="OBJECT" id="dblink" selected="true" />
+          </any-schema>
+        </extended-filter>
+      </filters>
+      <sorting enabled="true">
+        <sorting-element type="RESERVED_WORD" id="keyword" />
+        <sorting-element type="RESERVED_WORD" id="datatype" />
+        <sorting-element type="OBJECT" id="column" />
+        <sorting-element type="OBJECT" id="table" />
+        <sorting-element type="OBJECT" id="view" />
+        <sorting-element type="OBJECT" id="materialized view" />
+        <sorting-element type="OBJECT" id="index" />
+        <sorting-element type="OBJECT" id="constraint" />
+        <sorting-element type="OBJECT" id="trigger" />
+        <sorting-element type="OBJECT" id="synonym" />
+        <sorting-element type="OBJECT" id="sequence" />
+        <sorting-element type="OBJECT" id="procedure" />
+        <sorting-element type="OBJECT" id="function" />
+        <sorting-element type="OBJECT" id="package" />
+        <sorting-element type="OBJECT" id="type" />
+        <sorting-element type="OBJECT" id="dimension" />
+        <sorting-element type="OBJECT" id="cluster" />
+        <sorting-element type="OBJECT" id="dblink" />
+        <sorting-element type="OBJECT" id="schema" />
+        <sorting-element type="OBJECT" id="role" />
+        <sorting-element type="OBJECT" id="user" />
+        <sorting-element type="RESERVED_WORD" id="function" />
+        <sorting-element type="RESERVED_WORD" id="parameter" />
+      </sorting>
+      <format>
+        <enforce-code-style-case value="true" />
+      </format>
+    </code-completion-settings>
+    <execution-engine-settings>
+      <statement-execution>
+        <fetch-block-size value="100" />
+        <execution-timeout value="20" />
+        <debug-execution-timeout value="600" />
+        <focus-result value="false" />
+        <prompt-execution value="false" />
+      </statement-execution>
+      <script-execution>
+        <command-line-interfaces />
+        <execution-timeout value="300" />
+      </script-execution>
+      <method-execution>
+        <execution-timeout value="30" />
+        <debug-execution-timeout value="600" />
+        <parameter-history-size value="10" />
+      </method-execution>
+    </execution-engine-settings>
+    <operation-settings>
+      <transactions>
+        <uncommitted-changes>
+          <on-project-close value="ASK" />
+          <on-disconnect value="ASK" />
+          <on-autocommit-toggle value="ASK" />
+        </uncommitted-changes>
+        <multiple-uncommitted-changes>
+          <on-commit value="ASK" />
+          <on-rollback value="ASK" />
+        </multiple-uncommitted-changes>
+      </transactions>
+      <session-browser>
+        <disconnect-session value="ASK" />
+        <kill-session value="ASK" />
+        <reload-on-filter-change value="false" />
+      </session-browser>
+      <compiler>
+        <compile-type value="KEEP" />
+        <compile-dependencies value="ASK" />
+        <always-show-controls value="false" />
+      </compiler>
+      <debugger>
+        <debugger-type value="ASK" />
+        <use-generic-runners value="true" />
+      </debugger>
+    </operation-settings>
+    <ddl-file-settings>
+      <extensions>
+        <mapping file-type-id="VIEW" extensions="vw" />
+        <mapping file-type-id="TRIGGER" extensions="trg" />
+        <mapping file-type-id="PROCEDURE" extensions="prc" />
+        <mapping file-type-id="FUNCTION" extensions="fnc" />
+        <mapping file-type-id="PACKAGE" extensions="pkg" />
+        <mapping file-type-id="PACKAGE_SPEC" extensions="pks" />
+        <mapping file-type-id="PACKAGE_BODY" extensions="pkb" />
+        <mapping file-type-id="TYPE" extensions="tpe" />
+        <mapping file-type-id="TYPE_SPEC" extensions="tps" />
+        <mapping file-type-id="TYPE_BODY" extensions="tpb" />
+      </extensions>
+      <general>
+        <lookup-ddl-files value="true" />
+        <create-ddl-files value="false" />
+        <synchronize-ddl-files value="true" />
+        <use-qualified-names value="false" />
+        <make-scripts-rerunnable value="true" />
+      </general>
+    </ddl-file-settings>
+    <general-settings>
+      <regional-settings>
+        <date-format value="MEDIUM" />
+        <number-format value="UNGROUPED" />
+        <locale value="SYSTEM_DEFAULT" />
+        <use-custom-formats value="false" />
+      </regional-settings>
+      <environment>
+        <environment-types>
+          <environment-type id="development" name="Development" description="Development environment" color="-2430209/-12296320" readonly-code="false" readonly-data="false" />
+          <environment-type id="integration" name="Integration" description="Integration environment" color="-2621494/-12163514" readonly-code="true" readonly-data="false" />
+          <environment-type id="production" name="Production" description="Productive environment" color="-11574/-10271420" readonly-code="true" readonly-data="true" />
+          <environment-type id="other" name="Other" description="" color="-1576/-10724543" readonly-code="false" readonly-data="false" />
+        </environment-types>
+        <visibility-settings>
+          <connection-tabs value="true" />
+          <dialog-headers value="true" />
+          <object-editor-tabs value="true" />
+          <script-editor-tabs value="false" />
+          <execution-result-tabs value="true" />
+        </visibility-settings>
+      </environment>
+    </general-settings>
+  </component>
+  <component name="DBNavigator.Project.StatementExecutionManager">
+    <execution-variables />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/compiler.xml
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/compiler.xml	
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="TaskJDBC" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
